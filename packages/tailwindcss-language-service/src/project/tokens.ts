import type * as culori from 'culori'
import { AstNode } from '../css/ast'

export type ResolvedColor = culori.Color

export type ToenSource =
  // A class not known to the language server
  | 'unknown'

  // A class that was generated by Tailwind CSS
  | 'generated'

  // A class that exists in a stylesheet
  | 'authored'

export interface ResolvedDesignToken {
  readonly kind: 'design-token'
  readonly source: ToenSource

  /**
   * The name of this token as authored by the user
   *
   * It can represent one of the following:
   *
   * - a legacy-style config keypath (theme.colors.red.500)
   * - a CSS property (--some-color, authored in CSS)
   * - a theme namespace (--color-*, authored in `@theme`)
   * - a theme value (--color-red-500, authored in `@theme`)
   */
  readonly name: string

  /**
   * The value of the given design token
   */
  value(): string
}

export interface ResolvedClass {
  readonly kind: 'class'
  readonly source: ToenSource

  /**
   * The name of this class as authored by the user
   */
  readonly name: string

  /**
   * The variants present in this class
   *
   * These are not guaranteed to be valid. This is a syntactic check only.
   */
  readonly variants: readonly string[]

  /**
   * A list of known, allowed modifiers for this class
   * This list is empty when:
   * - Modifiers are not supported by the given version of Tailwind
   * - The class does not support any modifiers
   * - The class _already_ includes a modifier
   *
   * This list being empty *does not mean* that thie class cannot take any
   * modifiers. Only that we don't know what modifiers could be supported.
   */
  readonly modifiers: readonly string[]

  /**
   * Whether or not this class can be used with @apply
   */
  readonly apply: { allowed: true } | { allowed: false; reason: string }

  /**
   * The CSS AST this class generates
   */
  nodes(): AstNode[]

  /**
   * A list of representative color swatches for this class
   *
   * The first color swatch must be the "primary" swatch presented to the user
   * as it is used for suggestions.
   *
   * Most utilities will have at most one color
   *
   * Computing colors can be potentially costly as it requires resolving the
   * class into an AST.
   */
  colors(force?: boolean): ResolvedColor[]
}

export interface ResolvedVariant {
  readonly kind: 'variant'
  readonly source: ToenSource

  /**
   * The name of this variant as authored by the user
   */
  readonly name: string

  /**
   * A list of known, allowed modifiers for this variant
   * This list is empty when:
   * - Modifiers are not supported by the given version of Tailwind
   * - The variant does not support any modifiers
   * - The variant _already_ includes a modifier
   *
   * This list being empty *does not mean* that thie variant cannot take any
   * modifiers. Only that we don't know what modifiers could be supported.
   */
  readonly modifiers: readonly string[]

  /**
   * The list of CSS selectors or at-rules produced by this variant
   *
   * - Sibling selectors/at-rules introduce an entry into the array
   * - Nested selectors/at-rules produce a string like this:
   * ```css
   * selector1 { selector2 { some-at-rule { &:hover } } }
   * ```
   */
  selectors(): string[]
}
